{
  "id": "gen_1758791347829_tb6tw4iij",
  "timestamp": "2025-09-25T09:09:07.829Z",
  "model": "gpt-3.5-turbo",
  "scenario": {
    "summary": "User Login Test",
    "actions": [
      "I want to log in to the application",
      "Given I am on the login page",
      "When I enter my username and password",
      "And I click the login button",
      "Then I should be logged in successfully",
      "And I should see the dashboard"
    ]
  },
  "input": {
    "prompt": "Generate a test for the following scenario:\n\nSummary: User Login Test\n\nActions to perform:\n1. I want to log in to the application\n2. Given I am on the login page\n3. When I enter my username and password\n4. And I click the login button\n5. Then I should be logged in successfully\n6. And I should see the dashboard\n\nPlease generate:\n1. Complete test code that performs all the actions\n2. Add detailed comments and annotations\n3. Include proper setup and teardown\n4. Add error handling for each critical step\n5. Make it compatible with common testing frameworks (Jest/Mocha/Playwright)"
  },
  "output": {
    "code": "```javascript\n// Import necessary libraries\nconst { test, expect } = require('playwright');\n\n// Define test suite\ndescribe('User Login Test', () => {\n    let page;\n\n    // Setup before each test\n    beforeEach(async () => {\n        page = await browser.newPage();\n        await page.goto('https://example.com/login');\n    });\n\n    // Teardown after each test\n    afterEach(async () => {\n        await page.close();\n    });\n\n    // Test case for user login\n    test('User Login Test', async () => {\n        try {\n            // Given I am on the login page\n            // Check if login page is loaded successfully\n            expect(await page.title()).toBe('Login Page');\n\n            // When I enter my username and password\n            await page.fill('input[name=\"username\"]', 'myUsername');\n            await page.fill('input[name=\"password\"]', 'myPassword');\n\n            // And I click the login button\n            await Promise.all([\n                page.waitForNavigation(), // Wait for navigation to complete\n                page.click('button[type=\"submit\"]') // Click on login button\n            ]);\n\n            // Then I should be logged in successfully\n            // Check if user is logged in by verifying the presence of logout button\n            expect(await page.isVisible('button[id=\"logout\"]')).toBeTruthy();\n\n            // And I should see the dashboard\n            // Check if dashboard page is loaded successfully after login\n            expect(await page.title()).toBe('Dashboard');\n        } catch (error) {\n            // Handle any errors that occur during the test\n            console.error('An error occurred:', error);\n            throw error;\n        }\n    });\n});\n```",
    "annotations": [
      "Import necessary libraries",
      "Define test suite",
      "Setup before each test",
      "Teardown after each test",
      "Test case for user login",
      "Given I am on the login page",
      "Check if login page is loaded successfully",
      "When I enter my username and password",
      "And I click the login button",
      "Then I should be logged in successfully",
      "Check if user is logged in by verifying the presence of logout button",
      "And I should see the dashboard",
      "Check if dashboard page is loaded successfully after login",
      "Handle any errors that occur during the test"
    ],
    "tokenInfo": {
      "input": 226,
      "output": 339,
      "total": 565
    },
    "estimatedCost": "0.146900"
  }
}